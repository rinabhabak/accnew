# BSS Commerce Co.
#
# NOTICE OF LICENSE
#
# This source file is subject to the EULA
# that is bundled with this package in the file LICENSE.txt.
# It is also available through the world-wide-web at this URL:
# http://bsscommerce.com/Bss-Commerce-License.txt
#
# @category   BSS
# @package    Bss_ProductStockAlertGraphQl
# @author     Extension Team
# @copyright  Copyright (c) 2020-2021 BSS Commerce Co. ( http://bsscommerce.com )
# @license    http://bsscommerce.com/Bss-Commerce-License.txt

type Query {
    getStockNoticeConfiguration (
        store_id: Int! @doc(description: "Store ID")
    ): StockNoticeConfiguration
        @doc(description: "Stock notice module configuration")
        @resolver(class: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\Configuration")
        @cache(cacheIdentity: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\StockNotice\\ConfigurationIdentity")
    getStockNoticeProductData (
        product_id: Int! @doc(description: "Product ID")
        website_id: Int! @doc(description: "Website ID")
    ): StockNoticeProductDataOutput
        @doc(description: "Stock notice module product data")
        @resolver(class: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\ProductData")
        @cache(cacheIdentity: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\StockNotice\\ProductDataIdentity")
    getListByCustomer: StockNoticeOutput
        @doc(description: "Stock notice module get list by current customer")
        @resolver(class: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\ListByCustomer")
        @cache(cacheIdentity: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\StockNotice\\ListByCustomerIdentity")
    getById(
        stock_id: Int! @doc(description: "Stock alert ID")
    ): StockNoticeOutput
        @doc(description: "Stock notice module get by current customer and entity_id")
        @resolver(class: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\ItemById")
        @cache(cacheIdentity: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\StockNotice\\ItemByIdIdentity")
}

type Mutation {
    subscribeStockNotice(
        product_id: Int! @doc(description: "Product ID")
        parent_id: Int! @doc(description: "Parent product ID. If product is not a variant product(simple, download, virtual), parent_id is product ID")
        website_id: Int! @doc(description: "Website ID")
        email: String @doc(description: "Email address to subscribe. If email is empty, get customer email instead of")
    ): [StockNoticeValidationResult]
        @doc(description: "Stock notice module result after subscribed")
        @resolver(class: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\Subscribe")
    unsubscribeStockNotice(
        product_id: Int! @doc(description: "Product ID")
        parent_id: Int! @doc(description: "Parent product ID. If product is not a variant product(simple, download, virtual), parent_id is product ID")
        website_id: Int! @doc(description: "Website ID")
    ): [StockNoticeValidationResult]
        @doc(description: "Stock notice module result after subscribed")
        @resolver(class: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\UnSubscribe")
    unsubscribeAllStockNotice(
        website_id: Int! @doc(description: "Website ID")
    ): [StockNoticeValidationResult]
        @doc(description: "Stock notice module result after subscribed")
        @resolver(class: "Bss\\ProductStockAlertGraphQl\\Model\\Resolver\\UnSubscribeAll")
}

type StockNoticeConfiguration {
    allow_stock: Boolean @doc(description: "Is module enabled or disabled.")
    allow_customer: Boolean @doc(description: "Customer groups allowed")
    email_based_qty: Boolean @doc(description: "Yes/ only send email notification to limited number of customer subscriptions according to available number of product.")
    message: String @doc(description: "Notification message")
    stop_message: String @doc(description: "Stop notification message")
    send_limit: Int @doc(description: "Limit customer email could be received")
    allow_stock_qty: Int @doc(description: "Send mail to customer if only quantity is more than this amount.")
    button_text: String @doc(description: "Button text content")
    stop_button_text: String @doc(description: "Stop button text content")
    button_text_color: String @doc(description: "Button text color")
    button_color: String @doc(description: "Button background color")
}

type StockNoticeProductDataOutput {
    product_data: [StockNoticeProductItemsDataOutput] @doc(description: "Stock notice product items data")
}

type StockNoticeProductItemsDataOutput {
    product_stock_alert: Boolean @doc(description: "Is enabled stock notice on this product?")
    product_stock_status: Boolean @doc(description: "Is product out of stock or not?")
    has_email_subscribed: Boolean @doc(description: "Current customer has subscribed on this product?")
    product_id: Int @doc(description: "Product ID")
    parent_id: Int @doc(description: "Parent product ID, If product is not a variant product(simple, download, virtual), parent_id is product ID")
    product_type: String @doc(description: "Product type ID")
    customer_email: String @doc(description: "Customer email")
}

type StockNoticeOutput {
    items: [StockNoticeItemsOutput] @doc(description: "Stock Notice Items List")
}

type StockNoticeItemsOutput {
    alert_stock_id: Int @doc(description: "Stock Notice ID")
    customer_id: Int @doc(description: "Customer ID")
    customer_email: String @doc(description: "Customer Email")
    customer_name: String @doc(description: "Customer Name")
    product_sku: String @doc(description: "Product SKU")
    product_id: Int @doc(description: "Product ID")
    website_id: Int @doc(description: "Website ID")
    add_date: String @doc(description: "Add Date")
    send_date: String @doc(description: "Send Date")
    send_count: Int @doc(description: "Send Count")
    status: NOTICE_STATUS_ENUM @doc(description: "Status sent or pending send")
    parent_id: Int @doc(description: "Parent ID")
    store_id: Int @doc(description: "Store ID")
}

enum NOTICE_STATUS_ENUM {
    PENDING
    SENT
}

type StockNoticeValidationResult {
    message: String @doc(description: "Validation message")
    params: String @doc(description: "Validation params that not pass with validate")
}